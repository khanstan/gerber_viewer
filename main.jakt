struct Point {
    x: String
    y: String
}
struct Command {
    type: String
    id: String
}

enum Section {
    Command
    Coordinate
}

class GerberParser {
    // m_commands: [Command] 
    m_coordinates: [Point]

    public function build(parsed_file: String) throws -> void {
        let split_file = parsed_file.split('*')
        for section in split_file.iterator() {
            match_coordinates(section)
        }
        return
    }

    public function to_string() {
        
    }

    function match_coordinates(section: String) throws -> void {
        mut output_coordinates = Point( x: "", y: "")
        mut output_command: Command = Command(type: "", id: "")
        if section.byte_at(0) == b'X' {
            let x = section.split('X')[0]
            let split_x = x.split('Y')[0]
            output_coordinates.x = split_x
            output_coordinates.y = section.split('Y')[1]
            println("This is a Point, {}" output_coordinates)
        } else if section.byte_at(0) == b'M' {
            output_command.type = "M"
            output_command.id = section.split('M')[0]
            println("This is a command, {}" output_command)
        } else {
            println("This is something else, {}, {}" section.byte_at(0), section)
        }
    }
}

function parse_to_string(file_path: String) throws -> String {
    mut file = File::open_for_reading(file_path)
    mut builder = StringBuilder::create()
    for b in file.read_all().iterator() {
        builder.append(b)
    }
    
    return builder.to_string()
}

function main(args: [String]) throws {
    let parsed_file = parse_to_string(file_path: "test_files/mattram-63x63.iso")
    GerberParser::build(parsed_file)
}
